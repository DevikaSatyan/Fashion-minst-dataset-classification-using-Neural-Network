# -*- coding: utf-8 -*-
"""NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_k_-V-hN2LnfVwJQpBCmqEMj0kYva-qw
"""

import tensorflow as tf
from tensorflow import keras # keras is an API for tensor flow
import numpy as np
import matplotlib.pyplot as plt

data=keras.datasets.fashion_mnist#download data from keras

(train_images,train_labels),(test_images, test_labels)=data.load_data()

class_names=['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

print(train_labels[6])#labels are between 0 and 9

plt.imshow(train_images[7],cmap=plt.cm.binary)#here cmap is used to get a better view of the image
plt.show()

#creating model
#define architecture
model=keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),#flatten to give it as input
    keras.layers.Dense(128,activation="relu"), #dense layer is a fully connected layers. 128 is the hiddeen layer nodes
    keras.layers.Dense(10,activation="softmax")#output layer neurons=10, softmax= pick values for each neuron and so it sums upto one
])

model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics="accuracy")

model.fit(train_images, train_labels, epochs=10)

test_loss, test_acc =model.evaluate(test_images, test_labels)

print("Accuracy is: ",test_acc)

prediction=model.predict(test_images)
print(class_names[np.argmax(prediction[0])])#returns class name predicted,i.e, one with maximum probability value

for i in range(5):
  plt.grid(False)
  plt.imshow(test_images[i],cmap=plt.cm.binary) #to convert it into gray scale images
  plt.xlabel("Actual: "+ class_names[test_labels[i]])
  plt.title("Prediction: "+class_names[np.argmax(prediction[i])])
  plt.show()#to display all images

